# -*- coding: utf-8 -*-
"""lambda

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HLcfDarAFElUcIzSLnNbnH_sy-dNdJZh
"""

import pandas as pd

df = pd.read_csv("book1.csv")
test = pd.read_excel("test.xlsx")

df

test

df.shape

X = df.iloc[:,:3]
X

y = df.iloc[:,3:]
y

from sklearn.neighbors import KNeighborsRegressor
lr = KNeighborsRegressor()
lr.fit(X,y)
y_pred = lr.predict(test)
print(type(X),type(y))

# y_pred

import matplotlib.pyplot as plt
plt.plot(test['Temperature [Â°C]'],y_pred)
plt.show()

import numpy as np
def create_test(rate,Lambda,temp1,temp2):
    T = []
    i = temp1
    while (i>=temp2):
      i -= 0.5
      T.append(i)
    arr = np.zeros((len(T),3))
    for i in range(len(T)):
      arr[i][0] = rate
      arr[i][1] = Lambda
      arr[i][2] = T[i]
    test_data = pd.DataFrame(arr,columns = X.columns)
    return test_data

test_data = create_test(2350,1.5,631,345)

test_data
# print(type(test_data))

pred_0=lr.predict(test_data)

# pred_0

test_data['Mass fraction of liquid'] = pred_0

test_data

test_data.shape[0]

def truncate(data):
  index = []
  for i in range(data.shape[0]):
    if (data.iloc[i,3] <= 0.010):
      index.append(i)
  for i in index:
    data.drop(i,axis=0,inplace=True)

truncate(test_data)

test_data

import matplotlib.pyplot as plt
plt.plot(test_data['Temperature [Â°C]'],test_data['Mass fraction of liquid'])
plt.show()

def calculate(temp,root_frac,val):
  dy = [0.0]*len(root_frac)
  for i in range(len(temp)-1):
    dy[i] = (temp[i+1]-temp[i])/(root_frac[i+1]-root_frac[i])
  dy[-1] = (temp[-2]-temp[-1])/(root_frac[-2]-root_frac[-1])
  final = []
  for i in range(len(root_frac)):
    if (root_frac[i]-(val) <= 0.1):
      final.append(dy[i])
  return final

import math
math.sqrt(2)

def df_steepness(test):
  T_data = []
  F_data = []
  for i in range(test.shape[0]):
    T_data.append(test.iloc[i,2])
    F_data.append(math.sqrt(test.iloc[i,3]))
  return T_data,F_data

T_data, F_data = df_steepness(test_data)

dy = calculate(T_data,F_data,0.15)

dy

type(dy)

from numpy import inf
# dy.remove(-inf)
unwanted=[-inf]
dy = [ele for ele in dy if ele not in unwanted ]

dy

dy2 = list(filter(lambda x: x<=999 and x>= -999, dy))
dy2

from statistics import mean
slope = mean(dy2)
slope

steepness= 400
HTI = slope/steepness
HTI

# test_data.to_csv('OF5.csv',index=False)